{"version":3,"sources":["util/api.js","components/row/row.js","components/column/column.js","components/container/container.js","components/search/Search.js","components/card/card.js","components/nav/Nav.js","components/footer/Footer.js","components/main-content/main-content.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","Row","props","className","children","Column","Container","Search","onChange","handleInputChange","value","placeholder","name","type","id","Card","src","image","alt","firstName","lastName","format","DOB","phone","href","email","Nav","Footer","Main","state","results","users","sorted","search","searchFunction","query","data","filtered","i","toLowerCase","includes","dob","date","push","setState","event","console","log","target","filter","filteredList","item","values","Object","join","indexOf","API","then","res","catch","err","this","map","employees","key","size","picture","large","first","last","phoneNum","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.61a8ca17.chunk.js","sourcesContent":["// axios import - lowercase\r\nimport axios from 'axios';\r\n\r\n// export axios\r\nexport default {\r\n    list: function() {\r\n        return axios.get('https://randomuser.me/api/?results=20&nat=us');\r\n    }\r\n}","import React from 'react';\r\n\r\nfunction Row(props) {\r\n    return (\r\n        <div className=\"row\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;","import React from 'react';\r\n\r\nfunction Column(props) {\r\n    return (\r\n        <div className=\"col-lg-8\">{props.children}</div>\r\n    )\r\n}\r\n\r\nexport default Column;","import React from \"react\";\r\nimport \"../style.css\";\r\n\r\nfunction Container(props) {\r\n  return <div className=\"container\">{props.children}</div>;\r\n}\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\n\r\nfunction Search(props) {\r\n    return (\r\n        <div className=\"search\">\r\n        <br />\r\n          <input\r\n            onChange={props.handleInputChange}\r\n            value={props.value}\r\n            placeholder=\"Search\"\r\n            name=\"search-function\"\r\n            type=\"text\"\r\n            className=\"search-function\"\r\n            id=\"search\"\r\n          />\r\n        <br />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;","import React from \"react\";\r\nimport Moment from \"react-moment\";\r\nimport \"../style.css\";\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div className=\"card\">\r\n        <img\r\n          className=\"profile-image\"\r\n          src={props.image}\r\n          alt={`Viewing profile for ${props.firstName} ${props.lastName}.`}\r\n        />\r\n\r\n        <p className=\"profile-name text\">\r\n          {props.firstName} {props.lastName}\r\n        </p>\r\n\r\n        <p className=\"profile-dob text\">\r\n          Dob:{\" \"}\r\n          <Moment format=\"MM/DD/YYYY\" className=\"moment\">\r\n            {props.DOB}\r\n          </Moment>\r\n        </p>\r\n\r\n        <p className=\"profile-phone text\">{props.phone}</p>\r\n\r\n        <a className=\"profile-email\" href={`mailto:${props.email}`}>\r\n          {props.email}\r\n        </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport '../style.css';\r\n\r\nfunction Nav() {\r\n    return (\r\n        <nav className='navbar navbar-light'>\r\n            <span className='navbar-brand'>Employee Directory</span>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport '../style.css';\r\n\r\nfunction Footer() {\r\n    return (\r\n        <nav className='footer'>\r\n            <span>Created using react.</span>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from \"react\";\r\nimport API from \"../../util/api\";\r\nimport \"../style.css\";\r\n\r\n// will use these to connect all components below\r\nimport Row from \"../row/row\";\r\nimport Column from \"../column/column\";\r\nimport Container from \"../container/container\";\r\nimport Search from \"../search/Search\";\r\nimport Card from \"../card/card\"\r\nimport Nav from \"../nav/Nav\"\r\nimport Footer from \"../footer/Footer\"\r\n\r\n// class for entire page\r\n// connects other components\r\nclass Main extends Component {\r\n  state = {\r\n    results: [],\r\n    users: [],\r\n    sorted: false,\r\n    search: \"\",\r\n  };\r\n\r\n  // component mounting\r\n  // target API then set states of results / sorting\r\n  componentDidMount() {\r\n    API.list()\r\n      .then((res) =>\r\n        this.setState({\r\n          results: res.data.results,\r\n          users: res.data.results,\r\n        })\r\n      )\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  // allows for user to filter & sort results\r\n  // replaces dropdown, nav, submit functionality\r\n  // connects with values from card & search\r\n  searchFunction = (query) => {\r\n    const data = this.state.data;\r\n    const filtered = [];\r\n\r\n    for (let i in data) {\r\n      // first & last name\r\n      let name =\r\n        data[i].name.firstName.toLowerCase() +\r\n        \" \" +\r\n        data[i].name.lastName.toLowerCase();\r\n      if (\r\n        name.includes(query) ||\r\n        // email\r\n        data[i].email.includes(query) ||\r\n        // phone\r\n        data[i].phone.includes(query) ||\r\n        // dob\r\n        data[i].dob.date.includes(query)\r\n      ) {\r\n        // push data data\r\n        filtered.push(data[i]);\r\n      }\r\n    }\r\n    // set state of filtered results\r\n    this.setState({\r\n      results: filtered,\r\n    });\r\n  };\r\n\r\n  // changes input data based on search function value\r\n  handleInputChange = event => {\r\n    console.log(event.target.value);\r\n    const filter = event.target.value;\r\n    const filteredList = this.state.users.filter(item => {\r\n      // merge data together, then see if user input is anywhere inside\r\n      var values = Object.values(item)\r\n        .join(\"\")\r\n        .toLowerCase();\r\n        console.log(values)\r\n      return values.indexOf(filter.toLowerCase()) !== -1;\r\n    });\r\n    this.searchFunction(filteredList);\r\n    this.setState({ results: filteredList });\r\n  }\r\n\r\n  // rendering components data\r\n  render() {\r\n    const results = this.state.results;\r\n\r\n    return (\r\n      <div className='main-content'>\r\n        <Nav/>\r\n        <Search\r\n        value={this.state.value}\r\n        handleInputChange={this.handleInputChange} />\r\n        <Container>\r\n          <Row>\r\n            {\r\n              results.map((employees, i) => (\r\n                <Column key={i} size=\"col-lg-8\">\r\n                  <Card\r\n                    image={employees.picture.large}\r\n                    firstName={employees.name.first}\r\n                    lastName={employees.name.last}\r\n                    DOB={employees.dob.date}\r\n                    phoneNum={employees.phone}\r\n                    email={employees.email}\r\n                  />\r\n                </Column>\r\n              ))\r\n            }\r\n          </Row>\r\n        </Container>\r\n        <Footer/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport MainContent from \"./components/main-content/main-content.js\"\r\n\r\n\r\nfunction App() {\r\n  return <MainContent />\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n// importing style\r\nimport \"./index.css\";\r\n\r\n// must add components to render ^\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}